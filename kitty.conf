# vim:fileencoding=utf-8:foldmethod=marker

#: Fonts {{{

#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.

 font_family      Fira Code Retina Nerd Font Complete
 bold_font        auto
 italic_font      Victor Mono Medium Italic Nerd Font Complete
 bold_italic_font Victor Mono Bold Italic Nerd Font Complete

# font_size 11.0

#: Font size (in pts)

#symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 Victor Mono Nerd Font Complete
#symbol_map U+E5fa-U+E62b,U+E700-U+E7c5 Victor Mono Nerd Font Complete
#symbol_map U+f000-U+f2e0,U+E200-U+E2a9 Victor Mono Nerd Font Complete
#symbol_map U+f500-U+fd46,U+e300-U+E3eb Victor Mono Nerd Font Complete
#symbol_map U+f400-U+f4a8,U+2665,U+26a1,U+f27c Victor Mono Nerd Font Complete
#symbol_map U+23fb-U+23fe,U+2b58 Victor Mono Nerd Font# Complete
#symbol_map U+f300-U+f31c,U+e000-U+E00d Victor Mono Nerd Font Complete

#: Map the specified unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each unicode code
#: point is specified in the form U+<code point in hexadecimal>. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. symbol_map itself can be specified multiple
#: times. Syntax is::

#:     symbol_map codepoints Font Family Name

disable_ligatures never


font_features FiraCodeNerdFontComplete-Retina +cv06 +ss01 +cv14 +ss04 +ss03 +cv16 +cv31 +cv30 +ss07  

#: Choose exactly which OpenType features to enable or disable. This
#: is useful as some fonts might have features worthwhile in a
#: terminal. For example, Fira Code Retina includes a discretionary
#: feature, zero, which in that font changes the appearance of the
#: zero (0), to make it more easily distinguishable from Ã˜. Fira Code
#: Retina also includes other discretionary features known as
#: Stylistic Sets which have the tags ss01 through ss20.


# box_drawing_scale 0.001, 1, 1.5, 2

#: Change the sizes of the lines used for the box drawing unicode
#: characters These values are in pts. They will be scaled by the
#: monitor DPI to arrive at a pixel value. There must be four values
#: corresponding to thin, normal, thick, and very thick lines.

#: }}}

#: Cursor customization {{{

#amber
cursor #ffb000

#: Default cursor color
#primdark

cursor_text_color #19171a

cursor_blink_interval 0

#: The interval (in seconds) at which to blink the cursor. Set to zero
#: to disable blinking. Negative values mean use system default. Note
#: that numbers smaller than repaint_delay will be limited to
#: repaint_delay.

# cursor_stop_blinking_after 15.0

#: Stop blinking cursor after the specified number of seconds of
#: keyboard inactivity.  Set to zero to never stop blinking.

#: }}}

#: Window layout {{{

window_padding_width 0 

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.

placement_strategy center

#: When the window size is not an exact multiple of the cell size, the
#: cell area of the terminal window will have some extra padding on
#: the sides. You can control how that padding is distributed with
#: this option. Using a value of center means the cell area will be
#: placed centrally. A value of top-left means the padding will be on
#: only the bottom and right edges.

#: }}}

#: Tab bar {{{

tab_bar_edge top

#: Which edge to show the tab bar on, top or bottom

tab_bar_style fade

#: The tab bar style, can be one of:

#: fade
#:     Each tab's edges fade into the background color (see tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file
#: separator
#:     Tabs are separated by a configurable separator (see tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators (see tab_powerline_style)
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create a mapping
#:     for the https://sw.kovidgoyal.net/kitty/actions/#select-tab action which presents you with a list
#:     of tabs and allows for easy switching to a tab.

 tab_bar_min_tabs 1

#: The minimum number of tabs that must exist before the tab bar is
#: shown

# tab_switch_strategy previous

tab_title_template "{title}{sup.index}"

#: A template to render the tab title.

# active_tab_title_template none

#: Template to use for active tabs, if not specified falls back to
#: tab_title_template.

#amber
active_tab_foreground   #ffb000
#bronze
active_tab_background   #614f30
active_tab_font_style   bold_italic
#oro
inactive_tab_foreground #aa7d3e
#secdark
inactive_tab_background #201e21
inactive_tab_font_style italic

#: Tab bar colors and styles

#: }}}

#: Color scheme {{{
#Oro, Primdark
foreground #AA7d3e
background #19171a

#: The foreground and background colors

background_opacity 0.95

#: The opacity of the background. A number between 0 and 1, where 1 is
#: opaque and 0 is fully transparent.  This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the background color's opacity in
#: cells that have the same background color as the default terminal
#: background. This is so that things like the status bar in vim,
#: powerline prompts, etc. still look good.  But it means that if you
#: use a color theme with a background color in your editor, it will
#: not be rendered as transparent.  Instead you should change the
#: default background color in your kitty config and not use a
#: background color in the editor color scheme. Or use the escape
#: codes to set the terminals default colors in a shell script to
#: launch your editor.  Be aware that using a value less than 1.0 is a
#: (possibly significant) performance hit.  If you want to dynamically
#: change transparency of windows set dynamic_background_opacity to
#: yes (this is off by default as it has a performance cost). Changing
#: this setting when reloading the config will only work if
#: dynamic_background_opacity was enabled in the original config.

dynamic_background_opacity yes

#: Allow changing of the background_opacity dynamically, using either
#: keyboard shortcuts (increase_background_opacity and
#: decrease_background_opacity) or the remote control facility.
#: Changing this setting by reloading the config is not supported.

#: The color table {{{

#: The 256 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version, for the first 16 colors. You can set the
#: remaining 240 colors as color16 to color255.

# color0 #000000
# color8 #767676

#: black

# color1 #cc0403
# color9 #f2201f

#: red

# color2  #19cb00
# color10 #23fd00

#: green

# color3  #cecb00
# color11 #fffd00

#: yellow

# color4  #0d73cc
# color12 #1a8fff

#: blue

# color5  #cb1ed1
# color13 #fd28ff

#: magenta

# color6  #0dcdcd
# color14 #14ffff

#: cyan

# color7  #dddddd
# color15 #ffffff

#: white

# mark1_foreground black

#: Color for marks of type 1

# mark1_background #98d3cb

#: Color for marks of type 1 (light steel blue)

# mark2_foreground black

#: Color for marks of type 2

# mark2_background #f2dcd3

#: Color for marks of type 1 (beige)

# mark3_foreground black

#: Color for marks of type 3

# mark3_background #f274bc

#: Color for marks of type 3 (violet)

#: }}}

#: }}}


#: Keyboard shortcuts {{{

kitty_mod ctrl+shift

#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

#: Clipboard {{{

map Ctrl+c copy_or_interrupt
map Ctrl+v paste_from_clipboard

#: There is also a copy_or_interrupt action that can be optionally
#: mapped to Ctrl+c. It will copy only if there is a selection and
#: send an interrupt otherwise. Similarly, copy_and_clear_or_interrupt
#: will copy and clear the selection or send an interrupt if there is
#: no selection.

#: }}}

#: Window management {{{


#: }}}

#: Tab management {{{

map kitty_mod+l     next_tab
map kitty_mod+h     previous_tab
map kitty_mod+t     new_tab
map kitty_mod+c     close_tab
map kitty_mod+alt+t set_tab_title

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, and any number larger than the last tab being the last tab::

#: }}}

#: Layout management {{{

# map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout

#: There is also a toggle layout function that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::

#:     map ctrl+alt+z toggle_layout stack
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

map kitty_mod+plus      change_font_size all +2.0
map kitty_mod+minus     change_font_size all -2.0
map kitty_mod+backspace change_font_size all 0

#: To setup shortcuts for specific font sizes::

#: Select and act on visible text {{{

map kitty_mod+a>m    set_background_opacity +0.1
map kitty_mod+a>l    set_background_opacity -0.1
map kitty_mod+a>1    set_background_opacity 1
map kitty_mod+a>d    set_background_opacity default

#: }}}
